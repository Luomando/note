文件命名规则：
除了/之外的所有字符都可以作为文件名，但不建议使用特殊符号，另外大小写敏感。
.开头的文件表示隐藏文件

命令格式：
命令 -选项 参数
ls -la /etc  l和a是两个选项，可以用空格分开，不过通常连写；选项和参数不是必须的

命令位置：
root:  /sbin  /usr/sbin
all users:  /bin  /usr/bin
bin-binary简写  usr-user简写

注：命令执行过程中可使用ctrl+c来终止命令，比如查找文件过程中等

文件处理命令：
ls [选项] [目录名]  list简写  查看目录中有哪些文件
ls -a 显示所有文件，包括隐藏文件  a-all简写
ls -l 详细信息显示 l-long  如：
	drwxr-xr-x  3  root  root  4096  12-01  21:26  boot
	drwxr-xr-x可以分为三部分：d rwx r-x r-x
	第一个字符表示文件类型：d表示directory目录；-表示二进制文件；l表示软链接文件link
	rwx三个字符表示权限，read可读，write可写，execute可执行
	rwx表示所有者u-user；r-x表示所属组g-group；r-x表示其他o-others
	3 硬链接数（不重要）
	root 所有者 root 所属组
	4096 文件大小（不准确）单位：数据块 block 512字节（是Linux默认最小存储单位，可自行调整）
	12-01 21:26 文件创建时间或最后修改时间
	boot 文件名
ls -d 查看目录属性
ls -ld / 查看根目录的详细信息，/是参数；如果不带d是查看根目录里的各个目录的详细信息

cd [路径]  change directory  切换目录
cd / 切换到根目录

pwd  print  working directory  显示当前所在的目录
pwd 显示当前目录路径，直接输入这三个字母即可

mkdir [目录名]  make directory  创建空目录
mkdir test  test是目录名
mkdir /test  在根目录下创建test目录

touch [文件名]  创建空文件
touch newfile  newfile是文件名

cp [源文件] [目标目录]  copy  复制文件或目录
cp /etc/inittab /etc/services /test  将inittab和services复制到test目录中，复制多个文件之间用空格隔开，最后一个参数是目录即可
cp -R /etc /test  将etc目录复制到test目录中，复制目录必须使用-R

mv [源文件] [目标文件]  move  移动文件、改名
mv services service  将当前目录下的services改为service
mv /test/inittab /tmp/  将inittab移动到tmp目录
mv /test/inittab /tmp/ini.test  移动并改名

rm [选项] [文件名]  remove  删除文件
rm /test/service  删除service文件；会询问是否删除，输入y确认
rm -f service  删除文件，但不会进行询问
rm -rf test  删除test目录，需要使用r；另外f也是必须的，如果不加f则会对目录里的每个文件进行询问是否确认删除

cat [文件名]  concatenate and display files  查看文件内容
cat /etc/issue  只适合查看比较短的内容

more [文件名]  分页显示文件内容
more /etc/services  分页显示；之后可以使用以下命令进行操作
空格或f 显示下一页；enter 显示下一行；q 退出

head [-数字] [文件名]  查看文件的前几行
head -20 /etc/services  默认是10行，这里指定20行

tail [-数字] [文件名]  查看文件后几行
tail -30 /etc/services  显示文件后30行
tail -30f /etc/logs  使用f可以实时查看，比如实时更新的日志文件

ln [-s] [源文件] [目标文件]  link  产生链接文件
ln /etc/issue /issue.hard  将issue在根目录下创建issue.hard硬链接文件（类似cp，但是会和源文件同步更新，不过删除其中一个另一个不会被删除；硬链接和源文件拥有相同的i节点，所以可以同步更新；每个文件必须有个i节点，是内核调用的数字标识；硬链接不能跨文件系统）
ln -s /etc/issue /issue.soft  使用-s创建软链接文件（软链接类似Windows的快捷方式）


权限管理命令：
chmod [权限] [文件名]  change the permissions mode of a file  改变文件权限
chmod u + r  对user使用+增加权限r
chmod g - w  对group使用-取消权限w
chmod o = x  对other使用=赋予权限（清除之前的权限）x
使用数字来表示权限：r-4 w-2 x-1
rwxr-xr--  可以用754表示
chmod 641 test  将test改为641(rwxr----x)的权限（通常使用这种方法来修改权限，而不使用上面那种）
关于文件拥有的权限可以执行的命令(文件和目录是不一样的)：
文件
r-cat,more,head,tail
w-echo,vi
x-命令,脚本
目录
r-ls
w-touch,mkdir,rm
x-cd

chown [用户名] [文件名]  change owner  改变所有者
chown tirion file1  改变file1的所有者为tirion

chgrp [组名] [文件名]  change group  改变所属组
chgrp adm file1  改变file1的所属组为adm

umask  查看创建文件的默认权限，会输出类似0022这样的数，第一位0代表特殊权限位，022表示权限，但是需要用777-022=755；目录默认是755，文件默认为644


文件搜索命令：
which [命令名称] 显示系统命令所在路径，还会提供别名信息
which chmod  会输出/bin/chmod

whereis [命令名称] 显示系统命令所在路径，还会提供这个命令的帮助文件所在路径
whereis ls  会输出ls: /bin/ls /usr/share/man/...省略

find [搜索路径] [搜索关键字] 查找文件或目录，类似Windows的查找；应尽量缩小范围查找；重点！
find /etc -name init  在目录/etc中根据文件名(-name)查找文件init(完全匹配而不是包含)
find /etc -name init*  使用*来匹配任意字符，这里就是查找init开头的所有文件；两边都加*也就是包含init了
find /etc -name init???  使用?来匹配一个字符，这就是init开头的并且是7个字符的文件
find / -size +204800  在根目录下查找大于100MB的文件；-size是根据大小查找；+204800是100MB，因为一个块是512字节；也可以使用-201800来表示小于这个大小的
find /home -user tirion  在home目录下查找所有者(-user)为tirion的文件
find /etc -ctime -3  在etc下查找3天内属性被修改过的文件或目录；-ctime是以天为单位；-cmin单位就是分钟；c是change，文件属性被修改过，另外还有atime-access文件被访问过，mtime-modify文件内容被修改过；-3表示3天之内，+3表示超过3天
连接符1：-a and -o or
find /etc -size +163840 -a -size -204800  查找大于80M并且小于100M的文件
文件类型查找：-type f 二进制文件 l软链接文件 d目录
find /etc -name init* -a -type l  查找出类型为软链接的init*文件
连接符2：find ... -exec 命令 {} \;  {}表示find查询的结果,\是转义符。{} \; 是固定格式；-exec也可以使用-ok，-ok会询问是否执行
find /etc -name inittab -exec ls -l {} \;  在etc下查找inittab文件并显示其详细信息
find . -inum 12 -exec rm {} \;  这里.表示当前目录，-inum表示根据i节点查找，12是i节点序号；从当前目录下删除i节点为12的文件

locate [搜索关键字]  查找文件或目录；是从数据库中查找的
locate file  查找出文件名包含file的文件
updatedb  更新数据库，直接输入执行即可；系统会定期执行

grep [指定字符串] [源文件]  在文件中搜索字符串匹配的行并输出
grep ftp /etc/services


帮助命令：
man [命令或配置文件]  manual  获得帮助信息
man ls  查看ls命令的帮助信息
man services  查看配置文件services的帮助信息

info [任何命令]  information  获得帮助信息；与man相比主要是浏览方式不同
info ls  查看ls命令的帮助信息

whatis [任何命令]  获得索引的简短说明信息
whatis ls  获得ls的简短说明

[命令] --help  会列出这个命令的帮助信息
help [命令]  获得shell内置命令的帮助，只能使用这个方法


压缩解压命令：
gzip [文件]  压缩文件，压缩后格式.gz
gzip newfile  压缩newfile文件为newfile.gz
1、只能压缩文件，不能压缩目录  2、不保留源文件
gunzip [压缩文件]  解压文件

tar [选项] [目录]  打包目录，打包时可以使用-z压缩，压缩后格式.tar.gz
选项：-c 产生.tar打包文件；-v 显示详细信息(打包过程)；-f 指定压缩后的文件名；-z 打包同时压缩
tar -zcf newdir.tar.gz newdir  将newdir打包并压缩为newdir.tar.gz；注意newdir.tar.gz是自定义的压缩后的文件名，也可以和源目录名不同，并且可以不带.tar.gz的后缀，但是为了区分，通常使用这样的命名规范（某些Linux不支持-z，那么就只能先打包，再用gzip来压缩）
file [文件名]  查看这个文件的类型
tar [选项] [压缩文件]  解包
tar -zxvf dir1.tar.gz  使用-x来解包

zip [-r] [文件名] 压缩文件或目录，会保留源文件，后缀为.zip 默认Windows和Linux通用格式(压缩比很小，gzip压缩比很大)
zip services.zip /etc/services  将services压缩为services.zip
zip -r test.zip /test  压缩目录，需要使用-r
unzip [压缩包]  解压缩文件

bzip2 -k [文件名]  压缩文件，会保留源文件，压缩比高，后缀.bz2
bzip2 -k newfile1  压缩newfile1文件为newfile1.bz2
bunzip2 -k [压缩包名]  解压缩文件


网络通信指令：
write [用户名]  向另一个用户发送信息，输入命令后回车然后输入信息内容，结束按ctrl+d发送；对方必须在线
wall [信息]  向所有在线用户发送信息
ping [选项] [ip地址]  测试网络是否连通，ctrl+c终止，注意查看时间和丢包率；ping对方ping不通的时候应该先ping自己的ip看是否通，如果通则说明自己的网络设置没问题，如果不通再ping回环网卡127.0.0.1看是否通
ping -c 4 192.168.2.2  使用-c设定ping的次数，没这个选项则是一直ping下去

ifconfig [-a]  查看网卡的信息，类似Windows的ipconfig

shutdown [-h now]  关机，[立刻关机]
reboot  重启

快捷键
tab键  命令补全，输入几个字符按tab键能自动补全这个命令，前提是只有以这几个字符开头的唯一的命令，有多个会在再次按tab键的时候列出来
ctrl+l  清屏，也可以使用命令clear
ctrl+u  清除输入的所有字符，不用按删除键慢慢删了
上下键  翻过去执行过的命令


输入/输出重定向：
不使用标准的输入/输出（键盘输入/显示器输出），而使用别的方式输入输入，如从文件中输入，或输出到文件中
ls -l /tmp > /tmp.msg  使用>来输出重定向，将内容写入tmp.msg中(会清空已有内容)
ls -l /tmp >> /tmp.msg  追加到tmp.msg中(不会清空已有内容)
wall < /etc/msg  使用>来输入重定向，将msg文件的内容输入
cp -R /usr/backup/usr.bak 2> /bak.error  使用2>来保存错误信息


管道：将一个命令的输出传送给另一个命令，作为另一个命令的输入
命令1|命令2|命令3|命令n
ls -l /etc | more


; 用;间隔各个命令，按顺序依次执行
pwd ; ls ; date

&&  命令1 && 命令2  当命令1执行成功才会执行命令2

||  命令1 || 命令2  命令1执行成功，命令2就不执行；命令1执行失败，命令2才执行

命令替换符`，将一个命令的输出作为另一个命令的参数
命令1 `命令2`  将命令2的输出作为命令1的参数
ls -l `which touch`




